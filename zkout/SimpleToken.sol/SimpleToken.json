{"abi":null,"bytecode":{"object":""},"assembly":"\t.text\n\t.file\t\"SimpleToken.sol:SimpleToken\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[6]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_12\n\tadd\t128, r0, r2\n\tst.1\t64, r2\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_19\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_9[0], r2, r4\n\tjump.le\t@.BB0_35\n\tsub.s!\t@CPI0_10[0], r2, r4\n\tjump.le\t@.BB0_46\n\tsub.s!\t@CPI0_11[0], r2, r4\n\tjump.eq\t@.BB0_65\n\tsub.s!\t@CPI0_12[0], r2, r4\n\tjump.eq\t@.BB0_69\n\tsub.s!\t@CPI0_13[0], r2, r2\n\tjump.ne\t@.BB0_19\n\tcontext.get_context_u128\tr2\n\tsub.s!\t68, r3, r3\n\tjump.lt\t@.BB0_19\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_19\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_21[0], r2, r3\n\tjump.gt\t@.BB0_19\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r3\n\tsub.s!\t@CPI0_21[0], r3, r1\n\tjump.gt\t@.BB0_19\n\tst.1\t0, r2\n\tadd\t5, r0, r1\n\tst.1\t32, r1\n\tadd\t64, r0, r2\n\tadd\tr2, r0, stack-[6]\n\tadd\tr0, r0, r1\n\tadd\tr3, r0, stack-[5]\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[5], r0, r2\n\tst.1\t0, r2\n\tst.1\t32, r1\n\tadd\tr0, r0, r1\n\tadd\tstack-[6], r0, r2\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tjump\t@.BB0_81\n.BB0_12:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_19\n\tadd\t31, r3, r2\n\tand\t@CPI0_1[0], r2, r2\n\tadd\t128, r2, r2\n\tst.1\t64, r2\n\tand\t31, r3, r2\n\tshr.s!\t5, r3, r4\n\tjump.eq\t@.BB0_16\n\tadd\tr0, r0, r5\n.BB0_15:\n\tshl.s\t5, r5, r6\n\tptr.add\tr1, r6, r7\n\tld\tr7, r7\n\tadd\t128, r6, r6\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_15\n.BB0_16:\n\tsub!\tr2, r0, r5\n\tjump.eq\t@.BB0_18\n\tshl.s\t5, r4, r4\n\tptr.add\tr1, r4, r1\n\tshl.s\t3, r2, r2\n\tadd\t128, r4, r4\n\tld.1\tr4, r5\n\tshl\tr5, r2, r5\n\tshr\tr5, r2, r5\n\tld\tr1, r1\n\tsub\t256, r2, r2\n\tshr\tr1, r2, r1\n\tshl\tr1, r2, r1\n\tor\tr1, r5, r1\n\tst.1\tr4, r1\n.BB0_18:\n\tsub.s!\t32, r3, r1\n\tjump.ge\t@.BB0_20\n.BB0_19:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_20:\n\tsload\tr0, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r1\n\tand\t127, r1, r3\n\tadd.ne\tr1, r0, r3\n\tsub.s!\t31, r3, r1\n\tadd\t0, r0, r1\n\tadd.gt\t1, r0, r1\n\tsub!\tr2, r1, r1\n\tjump.ne\t@.BB0_76\n\tld.1\t128, r4\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_25\n\tadd\tr3, r0, stack-[5]\n\tadd\tr4, r0, stack-[6]\n\tst.1\t0, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_19\n\tld\tr1, r1\n\tadd\tstack-[5], r0, r2\n\tadd\t31, r2, r2\n\tshr.s\t5, r2, r2\n\tadd\tr1, r2, r2\n\tsub!\tr1, r2, r3\n\tadd\tstack-[6], r0, r4\n\tjump.ge\t@.BB0_25\n.BB0_24:\n\tsstore\tr1, r0\n\tadd\t1, r1, r1\n\tsub!\tr1, r2, r3\n\tjump.lt\t@.BB0_24\n.BB0_25:\n\tadd\t@CPI0_3[0], r0, r1\n\tsstore\tr0, r1\n\tadd\t1, r0, r5\n\tsload\tr5, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r2\n\tand\t127, r2, r3\n\tadd.ne\tr2, r0, r3\n\tsub.s!\t31, r3, r2\n\tadd\t0, r0, r2\n\tadd.gt\t1, r0, r2\n\txor\tr1, r2, r1\n\tand!\t1, r1, r1\n\tjump.ne\t@.BB0_76\n\tsub.s!\t31, r3, r1\n\tjump.le\t@.BB0_30\n\tadd\tr3, r0, stack-[4]\n\tadd\tr4, r0, stack-[6]\n\tadd\tr5, r0, stack-[5]\n\tst.1\t0, r5\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_19\n\tld\tr1, r1\n\tadd\tstack-[4], r0, r2\n\tadd\t31, r2, r2\n\tshr.s\t5, r2, r2\n\tadd\tr1, r2, r2\n\tsub!\tr1, r2, r3\n\tadd\tstack-[6], r0, r4\n\tadd\tstack-[5], r0, r5\n\tjump.ge\t@.BB0_30\n.BB0_29:\n\tsstore\tr1, r0\n\tadd\t1, r1, r1\n\tsub!\tr1, r2, r3\n\tjump.lt\t@.BB0_29\n.BB0_30:\n\tadd\t@CPI0_4[0], r0, r1\n\tsstore\tr5, r1\n\tadd\t2, r0, r1\n\tsload\tr1, r2\n\tsub.s\t256, r0, r3\n\tand\tr2, r3, r2\n\tor\t18, r2, r2\n\tsstore\tr1, r2\n\tmul\t@CPI0_5[0], r4, r3, r1\n\tsub!\tr4, r0, r1\n\tjump.eq\t@.BB0_32\n\tdiv\tr3, r4, r1, r2\n\tsub.s!\t@CPI0_5[0], r1, r1\n\tjump.ne\t@.BB0_104\n.BB0_32:\n\tadd\t3, r0, r1\n\tadd\tr3, r0, stack-[5]\n\tsstore\tr1, r3\n\tcontext.caller\tr1\n\tadd\tr1, r0, stack-[6]\n\tst.1\t0, r1\n\tadd\t4, r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_6[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_19\n\tld\tr1, r1\n\tadd\tstack-[5], r0, r2\n\tsstore\tr1, r2\n\tld.1\t64, r1\n\tst.1\tr1, r2\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd\t@CPI0_0[0], r0, r4\n\tadd.ge\tr4, r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_2[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI0_7[0], r0, r4\n\tadd\tr0, r0, r5\n\tadd\tstack-[6], r0, r6\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_19\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_8[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_35:\n\tsub.s!\t@CPI0_16[0], r2, r4\n\tjump.gt\t@.BB0_52\n\tsub.s!\t@CPI0_19[0], r2, r4\n\tjump.eq\t@.BB0_74\n\tsub.s!\t@CPI0_20[0], r2, r2\n\tjump.ne\t@.BB0_19\n\tcontext.get_context_u128\tr2\n\tsub.s!\t68, r3, r3\n\tjump.lt\t@.BB0_19\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_19\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tadd\tr2, r0, stack-[6]\n\tsub.s!\t@CPI0_21[0], r2, r2\n\tjump.gt\t@.BB0_19\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[4]\n\tcontext.caller\tr1\n\tadd\tr1, r0, stack-[5]\n\tst.1\t0, r1\n\tadd\t5, r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_6[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_19\n\tld\tr1, r1\n\tadd\tstack-[6], r0, r2\n\tst.1\t0, r2\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_6[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_19\n\tld\tr1, r1\n\tadd\tstack-[4], r0, r2\n\tsstore\tr1, r2\n\tld.1\t64, r1\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_2[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI0_33[0], r0, r4\n\tadd\tstack-[5], r0, r5\n\tadd\tstack-[6], r0, r6\n.BB0_44:\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_19\n\tld.1\t64, r1\n\tadd\t1, r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_34[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_46:\n\tsub.s!\t@CPI0_14[0], r2, r4\n\tjump.eq\t@.BB0_77\n\tsub.s!\t@CPI0_15[0], r2, r2\n\tjump.ne\t@.BB0_19\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r3\n\tjump.lt\t@.BB0_19\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_19\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI0_21[0], r1, r2\n\tjump.gt\t@.BB0_19\n\tst.1\t0, r1\n\tadd\t4, r0, r1\n\tst.1\t32, r1\n\tadd\t64, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tjump\t@.BB0_81\n.BB0_52:\n\tsub.s!\t@CPI0_17[0], r2, r4\n\tjump.eq\t@.BB0_79\n\tsub.s!\t@CPI0_18[0], r2, r2\n\tjump.ne\t@.BB0_19\n\tcontext.get_context_u128\tr2\n\tsub.s!\t100, r3, r3\n\tjump.lt\t@.BB0_19\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_19\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r4\n\tsub.s!\t@CPI0_21[0], r4, r2\n\tjump.gt\t@.BB0_19\n\tptr.add.s\t36, r1, r2\n\tld\tr2, r5\n\tsub.s!\t@CPI0_21[0], r5, r2\n\tjump.gt\t@.BB0_19\n\tptr.add.s\t68, r1, r1\n\tld\tr1, r2\n\tsub!\tr5, r0, r1\n\tjump.eq\t@.BB0_73\n\tadd\tr2, r0, stack-[5]\n\tst.1\t0, r4\n\tadd\t4, r0, r1\n\tadd\tr1, r0, stack-[4]\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_6[0], r1, r1\n\tadd\t32784, r0, r2\n\tadd\tr4, r0, stack-[6]\n\tadd\tr5, r0, stack-[3]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[6], r0, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_19\n\tld\tr1, r1\n\tsload\tr1, r1\n\tsub.s!\tstack-[5], r1, r1\n\tjump.lt\t@.BB0_88\n\tst.1\t0, r3\n\tadd\t5, r0, r1\n\tadd\tr1, r0, stack-[2]\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_6[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_19\n\tld\tr1, r1\n\tcontext.caller\tr2\n\tadd\tr2, r0, stack-[1]\n\tst.1\t0, r2\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_6[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[6], r0, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_19\n\tld\tr1, r1\n\tsload\tr1, r1\n\tsub.s!\tstack-[5], r1, r1\n\tjump.ge\t@.BB0_108\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI0_27[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t18, r0, r3\n\tjump\t@.BB0_89\n.BB0_65:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_19\n\tadd\t1, r0, r3\n\tsload\tr3, r2\n\tand!\t1, r2, r5\n\tshr.s\t1, r2, r1\n\tand\t127, r1, r4\n\tadd.eq\tr4, r0, r1\n\tsub.s!\t31, r1, r6\n\tadd\t0, r0, r6\n\tadd.gt\t1, r0, r6\n\txor\tr2, r6, r6\n\tand!\t1, r6, r6\n\tjump.ne\t@.BB0_76\n\tst.1\t128, r1\n\tsub!\tr5, r0, r5\n\tjump.ne\t@.BB0_84\n\tsub.s\t256, r0, r1\n\tand\tr2, r1, r1\n\tst.1\t160, r1\n\tsub!\tr4, r0, r1\n\tadd\t192, r0, r1\n\tadd.eq\t160, r0, r1\n\tjump\t@.BB0_95\n.BB0_69:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t68, r3, r3\n\tjump.lt\t@.BB0_19\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_19\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r4\n\tsub.s!\t@CPI0_21[0], r4, r2\n\tjump.gt\t@.BB0_19\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r2\n\tsub!\tr4, r0, r1\n\tjump.ne\t@.BB0_86\n.BB0_73:\n\tadd\t@CPI0_28[0], r0, r1\n\tst.1\t128, r1\n\tadd\t32, r0, r1\n\tst.1\t132, r1\n\tadd\t15, r0, r1\n\tst.1\t164, r1\n\tadd\t@CPI0_31[0], r0, r1\n\tst.1\t196, r1\n\tadd\t@CPI0_32[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_74:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_19\n\tsload\tr0, r2\n\tand!\t1, r2, r4\n\tshr.s\t1, r2, r1\n\tand\t127, r1, r3\n\tadd.eq\tr3, r0, r1\n\tsub.s!\t31, r1, r5\n\tadd\t0, r0, r5\n\tadd.gt\t1, r0, r5\n\txor\tr2, r5, r5\n\tand!\t1, r5, r5\n\tjump.eq\t@.BB0_82\n.BB0_76:\n\tadd\t@CPI0_25[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_26[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_77:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_19\n\tadd\t2, r0, r1\n\tsload\tr1, r1\n\tand\t255, r1, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_22[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_79:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_19\n\tadd\t3, r0, r1\n.BB0_81:\n\tsload\tr1, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_22[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_82:\n\tst.1\t128, r1\n\tsub!\tr4, r0, r4\n\tjump.ne\t@.BB0_90\n\tsub.s\t256, r0, r1\n\tand\tr2, r1, r1\n\tst.1\t160, r1\n\tsub!\tr3, r0, r1\n\tadd\t192, r0, r1\n\tadd.eq\t160, r0, r1\n\tjump\t@.BB0_99\n.BB0_84:\n\tst.1\t0, r3\n\tsub.s!\t2, r2, r2\n\tjump.ge\t@.BB0_92\n\tjump\t@.BB0_91\n.BB0_86:\n\tadd\tr2, r0, stack-[6]\n\tcontext.caller\tr1\n\tadd\tr1, r0, stack-[3]\n\tst.1\t0, r1\n\tadd\t4, r0, r1\n\tadd\tr1, r0, stack-[4]\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_6[0], r1, r1\n\tadd\t32784, r0, r2\n\tadd\tr4, r0, stack-[5]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_19\n\tld\tr1, r1\n\tsload\tr1, r1\n\tsub.s!\tstack-[6], r1, r1\n\tjump.ge\t@.BB0_102\n.BB0_88:\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI0_30[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t20, r0, r3\n.BB0_89:\n\tst.1\tr2, r3\n\tadd\t@CPI0_28[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_29[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_90:\n\tst.1\t0, r0\n\tsub.s!\t2, r2, r2\n\tjump.ge\t@.BB0_96\n.BB0_91:\n\tadd\t32, r0, r1\n\tjump\t@.BB0_101\n.BB0_92:\n\tadd\t@CPI0_23[0], r0, r2\n\tadd\tr0, r0, r4\n.BB0_93:\n\tadd\tr4, r0, r3\n\tsload\tr2, r4\n\tadd\t160, r3, r5\n\tst.1\tr5, r4\n\tadd\t1, r2, r2\n\tadd\t32, r3, r4\n\tsub!\tr4, r1, r5\n\tjump.lt\t@.BB0_93\n\tadd\t192, r3, r1\n.BB0_95:\n\tjump\t@.BB0_99\n.BB0_96:\n\tadd\t@CPI0_35[0], r0, r2\n\tadd\tr0, r0, r4\n.BB0_97:\n\tadd\tr4, r0, r3\n\tsload\tr2, r4\n\tadd\t160, r3, r5\n\tst.1\tr5, r4\n\tadd\t1, r2, r2\n\tadd\t32, r3, r4\n\tsub!\tr4, r1, r5\n\tjump.lt\t@.BB0_97\n\tadd\t192, r3, r1\n.BB0_99:\n\tsub.s\t97, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r1\n\tsub.s!\t@CPI0_24[0], r1, r2\n\tjump.le\t@.BB0_101\n\tadd\t@CPI0_25[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_26[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_101:\n\tadd\t128, r1, r1\n\tadd\tr1, r0, stack-[6]\n\tst.1\t64, r1\n\tadd\t128, r0, r2\n\tnear_call\tr0, @abi_encode_string, @DEFAULT_UNWIND\n\tadd\tstack-[6], r0, r4\n\tsub\tr1, r4, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_102:\n\tadd\tstack-[3], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[4], r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_6[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[5], r0, r4\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_19\n\tld\tr1, r1\n\tsload\tr1, r2\n\tadd\tstack-[6], r0, r5\n\tsub!\tr2, r5, r3\n\tjump.ge\t@.BB0_105\n.BB0_104:\n\tadd\t@CPI0_25[0], r0, r1\n\tst.1\t0, r1\n\tadd\t17, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_26[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_105:\n\tsub\tr2, r5, r2\n\tsstore\tr1, r2\n\tst.1\t0, r4\n\tadd\tstack-[4], r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_6[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[5], r0, r6\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_19\n\tld\tr1, r1\n\tsload\tr1, r3\n\tadd\tstack-[6], r0, r4\n\tadd\tr3, r4, r2\n\tsub!\tr2, r3, r3\n\tadd\t0, r0, r3\n\tadd.lt\t1, r0, r3\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_104\n\tsstore\tr1, r2\n\tld.1\t64, r1\n\tst.1\tr1, r4\n\tadd\t@CPI0_0[0], r0, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_2[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI0_7[0], r0, r4\n\tadd\tstack-[3], r0, r5\n\tjump\t@.BB0_44\n.BB0_108:\n\tst.1\t0, r3\n\tadd\tstack-[4], r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_6[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_19\n\tld\tr1, r1\n\tsload\tr1, r2\n\tsub.s!\tstack-[5], r2, r3\n\tjump.lt\t@.BB0_104\n\tsub.s\tstack-[5], r2, r2\n\tsstore\tr1, r2\n\tadd\tstack-[3], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[4], r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_6[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_19\n\tld\tr1, r1\n\tsload\tr1, r3\n\tadd\tstack-[5], r3, r2\n\tsub!\tr2, r3, r3\n\tadd\t0, r0, r3\n\tadd.lt\t1, r0, r3\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_104\n\tsstore\tr1, r2\n\tadd\tstack-[6], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[2], r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_6[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_19\n\tld\tr1, r1\n\tadd\tstack-[1], r0, r2\n\tst.1\t0, r2\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_6[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_19\n\tld\tr1, r1\n\tsload\tr1, r2\n\tsub.s!\tstack-[5], r2, r3\n\tjump.lt\t@.BB0_104\n\tadd\tstack-[5], r0, r3\n\tsub\tr2, r3, r2\n\tsstore\tr1, r2\n\tld.1\t64, r1\n\tst.1\tr1, r3\n\tadd\t@CPI0_0[0], r0, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_2[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI0_7[0], r0, r4\n\tadd\tstack-[6], r0, r5\n\tadd\tstack-[3], r0, r6\n\tjump\t@.BB0_44\n.func_end0:\n\nabi_encode_string:\n.func_begin1:\n\tadd\t32, r0, r3\n\tst.1.inc\tr1, r3, r4\n\tld.1.inc\tr2, r2, r3\n\tst.1\tr4, r2\n\tadd\t64, r1, r1\n\tsub!\tr2, r0, r4\n\tjump.eq\t@.BB1_3\n\tadd\tr0, r0, r4\n.BB1_2:\n\tadd\tr1, r4, r5\n\tadd\tr3, r4, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r4, r4\n\tsub!\tr4, r2, r5\n\tjump.lt\t@.BB1_2\n.BB1_3:\n\tadd\tr1, r2, r3\n\tst.1\tr3, r0\n\tadd\t31, r2, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr1, r2, r1\n\tret\n.func_end1:\n\n__sha3:\n.func_begin2:\n\tadd\t@CPI2_0[0], r0, r3\n\tsub.s!\t@CPI2_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t64, r1, r1\n\tsub.s!\t@CPI2_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI2_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI2_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB2_2\n\tld\tr1, r1\n\tret\n.BB2_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end2:\n\n__farcall:\n.func_begin3:\n.tmp0:\n\tfar_call\tr1, r2, @.BB3_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB3_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end3:\n\n__staticcall:\n.func_begin4:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB4_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB4_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end4:\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI2_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 8589934560\nCPI0_2:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_3:\n\t.cell 37728240695494079654380533323452712169875632484479406885335479991014707429398\nCPI0_4:\n\t.cell 37690899216828503810954959892537608556540820321323616393641740675290950008838\nCPI0_5:\n\t.cell 1000000000000000000\nCPI0_6:\n\t.cell 904625697166532776746648320380374280103671760270919307471179981048634146816\nCPI0_7:\n\t.cell -15402802100530019096323380498944738953123845089667699673314898783681816316945\nCPI0_8:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_9:\n\t.cell 826074470\nCPI0_10:\n\t.cell 2514000704\nCPI0_11:\n\t.cell 2514000705\nCPI0_12:\n\t.cell 2835717307\nCPI0_13:\n\t.cell 3714247998\nCPI0_14:\n\t.cell 826074471\nCPI0_15:\n\t.cell 1889567281\nCPI0_16:\n\t.cell 404098524\nCPI0_17:\n\t.cell 404098525\nCPI0_18:\n\t.cell 599290589\nCPI0_19:\n\t.cell 117300739\nCPI0_20:\n\t.cell 157198259\nCPI0_21:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_22:\n\t.cell 2535301202817642044428229017600\nCPI0_23:\n\t.cell -35707666377435648211887908874984608119992236509074197713628505308453184860938\nCPI0_24:\n\t.cell 18446744073709551487\nCPI0_25:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_26:\n\t.cell 2852213850513516153367582212096\nCPI0_27:\n\t.cell 29591903034640157767642027209555399188052184931326170838229451376879623733248\nCPI0_28:\n\t.cell 3963877391197344453575983046348115674221700746820753546331534351508065746944\nCPI0_29:\n\t.cell 7922816251426433759354395033600\nCPI0_30:\n\t.cell 33213987989631693067883787898814815401940191597450698095377559960427851415552\nCPI0_31:\n\t.cell 33214008156304899519539391814427204272104093577877601175008792263538360975360\nCPI0_32:\n\t.cell 7922816253787617000789217640448\nCPI0_33:\n\t.cell -52305948261162578668367882225327028569797882979485679342215860919519743330011\nCPI0_34:\n\t.cell 2535301200456458802993406410752\nCPI0_35:\n\t.cell 18569430475105882587588266137607568536673111973893317399460219858819262702947\nCPI2_1:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\n","methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"},"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.580a8fe5\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/SimpleToken.sol\":\"SimpleToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"src/SimpleToken.sol\":{\"keccak256\":\"0x7f6237dec74d669e5768f93e6e6d61497b29b64a8829f79f48520033d28c159e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e411cb700166a08a52e0a1c385d72155f493bbb5b3db115f3d72832694f94f31\",\"dweb:/ipfs/QmVGbQkPLAvLkTu5Jwm7nYQb2uXrRFL1aMYeThUuBbCP6v\"]}},\"version\":1}","solc_version":"0.8.19","solc_zkvm_edition":"1.0.1","zk_version":"1.4.1"},"storageLayout":{"storage":[],"types":{}},"userdoc":{},"devdoc":{},"irOptimized":"/// @use-src 22:\"src/SimpleToken.sol\"\nobject \"SimpleToken_35683\" {\n    code {\n        {\n            /// @src 22:57:1843  \"contract SimpleToken {...\"\n            let _1 := memoryguard(0x80)\n            if callvalue() { revert(0, 0) }\n            let programSize := datasize(\"SimpleToken_35683\")\n            let argSize := sub(codesize(), programSize)\n            let newFreePtr := add(_1, and(add(argSize, 31), not(31)))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, _1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 22:57:1843  \"contract SimpleToken {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 22:57:1843  \"contract SimpleToken {...\" */ 0x24)\n            }\n            mstore(64, newFreePtr)\n            codecopy(_1, programSize, argSize)\n            if slt(sub(add(_1, argSize), _1), 32)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 22:57:1843  \"contract SimpleToken {...\"\n            let value := mload(_1)\n            /// @src -1:-1:-1\n            let _2 := 0\n            /// @src 22:57:1843  \"contract SimpleToken {...\"\n            let _3 := extract_byte_array_length(sload(/** @src -1:-1:-1 */ _2))\n            /// @src 22:57:1843  \"contract SimpleToken {...\"\n            if gt(_3, 31)\n            {\n                mstore(/** @src -1:-1:-1 */ _2, _2)\n                /// @src 22:57:1843  \"contract SimpleToken {...\"\n                let data := keccak256(/** @src -1:-1:-1 */ _2, /** @src 22:57:1843  \"contract SimpleToken {...\" */ 32)\n                let _4 := add(data, shr(5, add(_3, 31)))\n                let start := data\n                for { } lt(start, _4) { start := add(start, 1) }\n                {\n                    sstore(start, /** @src -1:-1:-1 */ _2)\n                }\n            }\n            /// @src 22:57:1843  \"contract SimpleToken {...\"\n            sstore(/** @src -1:-1:-1 */ _2, /** @src 22:57:1843  \"contract SimpleToken {...\" */ add(\"SimpleToken\", 22))\n            let _5 := 1\n            let _6 := extract_byte_array_length(sload(_5))\n            if gt(_6, 31)\n            {\n                mstore(/** @src -1:-1:-1 */ _2, /** @src 22:57:1843  \"contract SimpleToken {...\" */ _5)\n                let data_1 := keccak256(/** @src -1:-1:-1 */ _2, /** @src 22:57:1843  \"contract SimpleToken {...\" */ 32)\n                let _7 := add(data_1, shr(5, add(_6, 31)))\n                let start_1 := data_1\n                for { } lt(start_1, _7) { start_1 := add(start_1, _5) }\n                {\n                    sstore(start_1, /** @src -1:-1:-1 */ _2)\n                }\n            }\n            /// @src 22:57:1843  \"contract SimpleToken {...\"\n            sstore(_5, add(\"STK\", 6))\n            sstore(/** @src 22:182:184  \"18\" */ 0x02, /** @src 22:57:1843  \"contract SimpleToken {...\" */ or(and(sload(/** @src 22:182:184  \"18\" */ 0x02), /** @src 22:57:1843  \"contract SimpleToken {...\" */ not(255)), /** @src 22:182:184  \"18\" */ 0x12))\n            /// @src 22:57:1843  \"contract SimpleToken {...\"\n            let _8 := 0x0de0b6b3a7640000\n            let product := mul(value, _8)\n            if iszero(or(iszero(value), eq(_8, div(product, value))))\n            {\n                mstore(/** @src -1:-1:-1 */ _2, /** @src 22:57:1843  \"contract SimpleToken {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x11)\n                revert(/** @src -1:-1:-1 */ _2, /** @src 22:57:1843  \"contract SimpleToken {...\" */ 0x24)\n            }\n            sstore(3, product)\n            mstore(/** @src -1:-1:-1 */ _2, /** @src 22:629:639  \"msg.sender\" */ caller())\n            /// @src 22:57:1843  \"contract SimpleToken {...\"\n            mstore(32, /** @src 22:619:628  \"balanceOf\" */ 0x04)\n            /// @src 22:57:1843  \"contract SimpleToken {...\"\n            sstore(keccak256(/** @src -1:-1:-1 */ _2, /** @src 22:57:1843  \"contract SimpleToken {...\" */ 64), product)\n            /// @src 22:669:714  \"Transfer(address(0), msg.sender, totalSupply)\"\n            let _9 := /** @src 22:57:1843  \"contract SimpleToken {...\" */ mload(64)\n            mstore(_9, product)\n            /// @src 22:669:714  \"Transfer(address(0), msg.sender, totalSupply)\"\n            log3(_9, /** @src 22:57:1843  \"contract SimpleToken {...\" */ 32, /** @src 22:669:714  \"Transfer(address(0), msg.sender, totalSupply)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, /** @src -1:-1:-1 */ _2, /** @src 22:629:639  \"msg.sender\" */ caller())\n            /// @src 22:57:1843  \"contract SimpleToken {...\"\n            let _10 := mload(64)\n            let _11 := datasize(\"SimpleToken_35683_deployed\")\n            codecopy(_10, dataoffset(\"SimpleToken_35683_deployed\"), _11)\n            return(_10, _11)\n        }\n        function extract_byte_array_length(data) -> length\n        {\n            length := shr(1, data)\n            let outOfPlaceEncoding := and(data, 1)\n            if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n            if eq(outOfPlaceEncoding, lt(length, 32))\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x22)\n                revert(0, 0x24)\n            }\n        }\n    }\n    /// @use-src 22:\"src/SimpleToken.sol\"\n    object \"SimpleToken_35683_deployed\" {\n        code {\n            {\n                /// @src 22:57:1843  \"contract SimpleToken {...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                let _3 := 4\n                if iszero(lt(calldatasize(), _3))\n                {\n                    let _4 := 0\n                    switch shr(224, calldataload(_4))\n                    case 0x06fdde03 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let ret := _4\n                        let slotValue := sload(_4)\n                        let length := _4\n                        let _5 := 1\n                        length := shr(_5, slotValue)\n                        let outOfPlaceEncoding := and(slotValue, _5)\n                        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                        let _6 := 32\n                        if eq(outOfPlaceEncoding, lt(length, _6))\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x22)\n                            revert(_4, 0x24)\n                        }\n                        mstore(_1, length)\n                        switch outOfPlaceEncoding\n                        case 0 {\n                            mstore(add(_1, _6), and(slotValue, not(255)))\n                            ret := add(add(_1, shl(5, iszero(iszero(length)))), _6)\n                        }\n                        case 1 {\n                            mstore(_4, _4)\n                            let dataPos := 18569430475105882587588266137607568536673111973893317399460219858819262702947\n                            let i := _4\n                            for { } lt(i, length) { i := add(i, _6) }\n                            {\n                                mstore(add(add(_1, i), _6), sload(dataPos))\n                                dataPos := add(dataPos, _5)\n                            }\n                            ret := add(add(_1, i), _6)\n                        }\n                        let newFreePtr := add(_1, and(add(sub(ret, _1), 31), not(31)))\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, _1))\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, 0x24)\n                        }\n                        mstore(_2, newFreePtr)\n                        return(newFreePtr, sub(abi_encode_string(newFreePtr, _1), newFreePtr))\n                    }\n                    case 0x095ea7b3 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                        let value0 := abi_decode_address()\n                        let value := calldataload(36)\n                        mstore(_4, /** @src 22:1209:1219  \"msg.sender\" */ caller())\n                        /// @src 22:57:1843  \"contract SimpleToken {...\"\n                        mstore(32, /** @src 22:1199:1208  \"allowance\" */ 0x05)\n                        /// @src 22:57:1843  \"contract SimpleToken {...\"\n                        let _7 := keccak256(_4, _2)\n                        let _8 := and(value0, sub(shl(160, 1), 1))\n                        mstore(_4, _8)\n                        mstore(32, _7)\n                        sstore(keccak256(_4, _2), value)\n                        /// @src 22:1263:1301  \"Approval(msg.sender, _spender, _value)\"\n                        let _9 := /** @src 22:57:1843  \"contract SimpleToken {...\" */ mload(_2)\n                        mstore(_9, value)\n                        /// @src 22:1263:1301  \"Approval(msg.sender, _spender, _value)\"\n                        log3(_9, /** @src 22:57:1843  \"contract SimpleToken {...\" */ 32, /** @src 22:1263:1301  \"Approval(msg.sender, _spender, _value)\" */ 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, /** @src 22:1209:1219  \"msg.sender\" */ caller(), /** @src 22:1263:1301  \"Approval(msg.sender, _spender, _value)\" */ _8)\n                        /// @src 22:57:1843  \"contract SimpleToken {...\"\n                        let memPos := mload(_2)\n                        mstore(memPos, 1)\n                        return(memPos, 32)\n                    }\n                    case 0x18160ddd {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let _10 := sload(/** @src 22:190:216  \"uint256 public totalSupply\" */ 3)\n                        /// @src 22:57:1843  \"contract SimpleToken {...\"\n                        let memPos_1 := mload(_2)\n                        mstore(memPos_1, _10)\n                        return(memPos_1, 32)\n                    }\n                    case 0x23b872dd {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), 96) { revert(_4, _4) }\n                        let value0_1 := abi_decode_address()\n                        let value1 := abi_decode_address_3798()\n                        let value_1 := calldataload(68)\n                        let _11 := sub(shl(160, 1), 1)\n                        let _12 := and(/** @src 22:1449:1466  \"_to != address(0)\" */ value1, /** @src 22:57:1843  \"contract SimpleToken {...\" */ _11)\n                        /// @src 22:1441:1486  \"require(_to != address(0), \\\"Invalid address\\\")\"\n                        require_helper_stringliteral(/** @src 22:1449:1466  \"_to != address(0)\" */ iszero(iszero(/** @src 22:57:1843  \"contract SimpleToken {...\" */ _12)))\n                        let _13 := and(value0_1, _11)\n                        mstore(_4, _13)\n                        let _14 := 32\n                        mstore(_14, _3)\n                        /// @src 22:1496:1555  \"require(balanceOf[_from] >= _value, \\\"Insufficient balance\\\")\"\n                        require_helper_stringliteral_4753(/** @src 22:1504:1530  \"balanceOf[_from] >= _value\" */ iszero(lt(/** @src 22:57:1843  \"contract SimpleToken {...\" */ sload(keccak256(_4, _2)), /** @src 22:1504:1530  \"balanceOf[_from] >= _value\" */ value_1)))\n                        /// @src 22:57:1843  \"contract SimpleToken {...\"\n                        mstore(_4, _13)\n                        mstore(_14, /** @src 22:1573:1582  \"allowance\" */ 0x05)\n                        /// @src 22:57:1843  \"contract SimpleToken {...\"\n                        let dataSlot := keccak256(_4, _2)\n                        mstore(_4, /** @src 22:1590:1600  \"msg.sender\" */ caller())\n                        /// @src 22:57:1843  \"contract SimpleToken {...\"\n                        mstore(_14, dataSlot)\n                        if /** @src 22:1573:1611  \"allowance[_from][msg.sender] >= _value\" */ lt(/** @src 22:57:1843  \"contract SimpleToken {...\" */ sload(keccak256(_4, _2)), /** @src 22:1573:1611  \"allowance[_from][msg.sender] >= _value\" */ value_1)\n                        /// @src 22:57:1843  \"contract SimpleToken {...\"\n                        {\n                            let memPtr := mload(_2)\n                            mstore(memPtr, shl(229, 4594637))\n                            mstore(add(memPtr, _3), _14)\n                            mstore(add(memPtr, 36), 18)\n                            mstore(add(memPtr, 68), \"Allowance exceeded\")\n                            revert(memPtr, 100)\n                        }\n                        mstore(_4, _13)\n                        mstore(_14, _3)\n                        let dataSlot_1 := keccak256(_4, _2)\n                        sstore(dataSlot_1, /** @src 22:1653:1679  \"balanceOf[_from] -= _value\" */ checked_sub_uint256(/** @src 22:57:1843  \"contract SimpleToken {...\" */ sload(/** @src 22:1653:1679  \"balanceOf[_from] -= _value\" */ dataSlot_1), value_1))\n                        /// @src 22:57:1843  \"contract SimpleToken {...\"\n                        mstore(_4, _12)\n                        mstore(_14, _3)\n                        let dataSlot_2 := keccak256(_4, _2)\n                        sstore(dataSlot_2, /** @src 22:1689:1713  \"balanceOf[_to] += _value\" */ checked_add_uint256(/** @src 22:57:1843  \"contract SimpleToken {...\" */ sload(/** @src 22:1689:1713  \"balanceOf[_to] += _value\" */ dataSlot_2), value_1))\n                        /// @src 22:57:1843  \"contract SimpleToken {...\"\n                        mstore(_4, _13)\n                        mstore(_14, /** @src 22:1573:1582  \"allowance\" */ 0x05)\n                        /// @src 22:57:1843  \"contract SimpleToken {...\"\n                        let _15 := keccak256(_4, _2)\n                        mstore(_4, /** @src 22:1590:1600  \"msg.sender\" */ caller())\n                        /// @src 22:57:1843  \"contract SimpleToken {...\"\n                        mstore(_14, _15)\n                        let dataSlot_3 := keccak256(_4, _2)\n                        sstore(dataSlot_3, /** @src 22:1723:1761  \"allowance[_from][msg.sender] -= _value\" */ checked_sub_uint256(/** @src 22:57:1843  \"contract SimpleToken {...\" */ sload(/** @src 22:1723:1761  \"allowance[_from][msg.sender] -= _value\" */ dataSlot_3), value_1))\n                        /// @src 22:1785:1813  \"Transfer(_from, _to, _value)\"\n                        let _16 := /** @src 22:57:1843  \"contract SimpleToken {...\" */ mload(_2)\n                        mstore(_16, value_1)\n                        /// @src 22:1785:1813  \"Transfer(_from, _to, _value)\"\n                        log3(_16, /** @src 22:57:1843  \"contract SimpleToken {...\" */ _14, /** @src 22:1785:1813  \"Transfer(_from, _to, _value)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, _13, _12)\n                        /// @src 22:57:1843  \"contract SimpleToken {...\"\n                        let memPos_2 := mload(_2)\n                        mstore(memPos_2, 1)\n                        return(memPos_2, _14)\n                    }\n                    case 0x313ce567 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let value_2 := and(sload(/** @src 22:158:184  \"uint8 public decimals = 18\" */ 2), /** @src 22:57:1843  \"contract SimpleToken {...\" */ 0xff)\n                        let memPos_3 := mload(_2)\n                        mstore(memPos_3, value_2)\n                        return(memPos_3, 32)\n                    }\n                    case 0x70a08231 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                        mstore(_4, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                        mstore(32, _3)\n                        let _17 := sload(keccak256(_4, _2))\n                        let memPos_4 := mload(_2)\n                        mstore(memPos_4, _17)\n                        return(memPos_4, 32)\n                    }\n                    case 0x95d89b41 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let memPtr_1 := mload(_2)\n                        let ret_1 := _4\n                        /// @src 22:124:152  \"string public symbol = \\\"STK\\\"\"\n                        let _18 := 1\n                        /// @src 22:57:1843  \"contract SimpleToken {...\"\n                        let slotValue_1 := sload(/** @src 22:124:152  \"string public symbol = \\\"STK\\\"\" */ _18)\n                        /// @src 22:57:1843  \"contract SimpleToken {...\"\n                        let length_1 := _4\n                        length_1 := shr(/** @src 22:124:152  \"string public symbol = \\\"STK\\\"\" */ _18, /** @src 22:57:1843  \"contract SimpleToken {...\" */ slotValue_1)\n                        let outOfPlaceEncoding_1 := and(slotValue_1, /** @src 22:124:152  \"string public symbol = \\\"STK\\\"\" */ _18)\n                        /// @src 22:57:1843  \"contract SimpleToken {...\"\n                        if iszero(outOfPlaceEncoding_1)\n                        {\n                            length_1 := and(length_1, 0x7f)\n                        }\n                        let _19 := 32\n                        if eq(outOfPlaceEncoding_1, lt(length_1, _19))\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x22)\n                            revert(_4, 0x24)\n                        }\n                        mstore(memPtr_1, length_1)\n                        switch outOfPlaceEncoding_1\n                        case 0 {\n                            mstore(add(memPtr_1, _19), and(slotValue_1, not(255)))\n                            ret_1 := add(add(memPtr_1, shl(5, iszero(iszero(length_1)))), _19)\n                        }\n                        case 1 {\n                            mstore(_4, /** @src 22:124:152  \"string public symbol = \\\"STK\\\"\" */ _18)\n                            /// @src 22:57:1843  \"contract SimpleToken {...\"\n                            let dataPos_1 := 80084422859880547211683076133703299733277748156566366325829078699459944778998\n                            let i_1 := _4\n                            for { } lt(i_1, length_1) { i_1 := add(i_1, _19) }\n                            {\n                                mstore(add(add(memPtr_1, i_1), _19), sload(dataPos_1))\n                                dataPos_1 := add(dataPos_1, /** @src 22:124:152  \"string public symbol = \\\"STK\\\"\" */ _18)\n                            }\n                            /// @src 22:57:1843  \"contract SimpleToken {...\"\n                            ret_1 := add(add(memPtr_1, i_1), _19)\n                        }\n                        let newFreePtr_1 := add(memPtr_1, and(add(sub(ret_1, memPtr_1), 31), not(31)))\n                        if or(gt(newFreePtr_1, 0xffffffffffffffff), lt(newFreePtr_1, memPtr_1))\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, 0x24)\n                        }\n                        mstore(_2, newFreePtr_1)\n                        return(newFreePtr_1, sub(abi_encode_string(newFreePtr_1, memPtr_1), newFreePtr_1))\n                    }\n                    case 0xa9059cbb {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                        let value0_2 := abi_decode_address()\n                        let value_3 := calldataload(36)\n                        let _20 := and(/** @src 22:822:839  \"_to != address(0)\" */ value0_2, /** @src 22:57:1843  \"contract SimpleToken {...\" */ sub(shl(160, 1), 1))\n                        /// @src 22:814:859  \"require(_to != address(0), \\\"Invalid address\\\")\"\n                        require_helper_stringliteral(/** @src 22:822:839  \"_to != address(0)\" */ iszero(iszero(/** @src 22:57:1843  \"contract SimpleToken {...\" */ _20)))\n                        mstore(_4, /** @src 22:887:897  \"msg.sender\" */ caller())\n                        /// @src 22:57:1843  \"contract SimpleToken {...\"\n                        mstore(32, _3)\n                        /// @src 22:869:933  \"require(balanceOf[msg.sender] >= _value, \\\"Insufficient balance\\\")\"\n                        require_helper_stringliteral_4753(/** @src 22:877:908  \"balanceOf[msg.sender] >= _value\" */ iszero(lt(/** @src 22:57:1843  \"contract SimpleToken {...\" */ sload(keccak256(_4, _2)), /** @src 22:877:908  \"balanceOf[msg.sender] >= _value\" */ value_3)))\n                        /// @src 22:57:1843  \"contract SimpleToken {...\"\n                        mstore(_4, /** @src 22:887:897  \"msg.sender\" */ caller())\n                        /// @src 22:57:1843  \"contract SimpleToken {...\"\n                        mstore(32, _3)\n                        let dataSlot_4 := keccak256(_4, _2)\n                        sstore(dataSlot_4, /** @src 22:952:983  \"balanceOf[msg.sender] -= _value\" */ checked_sub_uint256(/** @src 22:57:1843  \"contract SimpleToken {...\" */ sload(/** @src 22:952:983  \"balanceOf[msg.sender] -= _value\" */ dataSlot_4), value_3))\n                        /// @src 22:57:1843  \"contract SimpleToken {...\"\n                        mstore(_4, _20)\n                        mstore(32, _3)\n                        let dataSlot_5 := keccak256(_4, _2)\n                        sstore(dataSlot_5, /** @src 22:993:1017  \"balanceOf[_to] += _value\" */ checked_add_uint256(/** @src 22:57:1843  \"contract SimpleToken {...\" */ sload(/** @src 22:993:1017  \"balanceOf[_to] += _value\" */ dataSlot_5), value_3))\n                        /// @src 22:1041:1074  \"Transfer(msg.sender, _to, _value)\"\n                        let _21 := /** @src 22:57:1843  \"contract SimpleToken {...\" */ mload(_2)\n                        mstore(_21, value_3)\n                        /// @src 22:1041:1074  \"Transfer(msg.sender, _to, _value)\"\n                        log3(_21, /** @src 22:57:1843  \"contract SimpleToken {...\" */ 32, /** @src 22:1041:1074  \"Transfer(msg.sender, _to, _value)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, /** @src 22:887:897  \"msg.sender\" */ caller(), /** @src 22:1041:1074  \"Transfer(msg.sender, _to, _value)\" */ _20)\n                        /// @src 22:57:1843  \"contract SimpleToken {...\"\n                        let memPos_5 := mload(_2)\n                        mstore(memPos_5, 1)\n                        return(memPos_5, 32)\n                    }\n                    case 0xdd62ed3e {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                        let value0_3 := abi_decode_address()\n                        let value1_1 := abi_decode_address_3798()\n                        let _22 := sub(shl(160, 1), 1)\n                        mstore(_4, and(value0_3, _22))\n                        mstore(32, /** @src 22:277:341  \"mapping(address => mapping(address => uint256)) public allowance\" */ 5)\n                        /// @src 22:57:1843  \"contract SimpleToken {...\"\n                        let _23 := keccak256(_4, _2)\n                        mstore(_4, and(value1_1, _22))\n                        mstore(32, _23)\n                        let _24 := sload(keccak256(_4, _2))\n                        let memPos_6 := mload(_2)\n                        mstore(memPos_6, _24)\n                        return(memPos_6, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n            function abi_encode_string(headStart, value0) -> tail\n            {\n                let _1 := 32\n                mstore(headStart, _1)\n                let length := mload(value0)\n                mstore(add(headStart, _1), length)\n                let i := 0\n                for { } lt(i, length) { i := add(i, _1) }\n                {\n                    mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n                }\n                mstore(add(add(headStart, length), 64), 0)\n                tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n            }\n            function abi_decode_address() -> value\n            {\n                value := calldataload(4)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function abi_decode_address_3798() -> value\n            {\n                value := calldataload(36)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function require_helper_stringliteral(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 15)\n                    mstore(add(memPtr, 68), \"Invalid address\")\n                    revert(memPtr, 100)\n                }\n            }\n            function require_helper_stringliteral_4753(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 20)\n                    mstore(add(memPtr, 68), \"Insufficient balance\")\n                    revert(memPtr, 100)\n                }\n            }\n            function checked_sub_uint256(x, y) -> diff\n            {\n                diff := sub(x, y)\n                if gt(diff, x)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n            }\n            function checked_add_uint256(x, y) -> sum\n            {\n                sum := add(x, y)\n                if gt(x, sum)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n            }\n        }\n        data \".metadata\" hex\"a164736f6c6343000813000a\"\n    }\n}\n","hash":"010000f5308c3d96b0337c4ecc7f3cfbe24b6caeec57d32c84eefe62b8641267","factoryDependencies":{},"id":22}