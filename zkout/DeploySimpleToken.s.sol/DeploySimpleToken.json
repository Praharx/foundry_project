{"abi":null,"bytecode":{"object":"0002000000000002000300000000000200000000030100190000006003300270000000450330019700010000003103550000008004000039000000400040043f0000000102200190000000540000c13d000000040230008c000000cb0000413d000000000101043b000000e001100270000000490210009c000000610000613d0000004a0110009c000000cb0000c13d0000000001000416000000000101004b000000cb0000c13d000300000004001d0000004d0100004100000000001004390000004e01000041000000040010044300000045010000410000000002000414000000450320009c0000000002018019000000c0012002100000004f011001c700008002020000390110010b0000040f0000000102200190000000cd0000613d000000000101043b000000000101004b000000cb0000613d0000005001000041000000800010043f00000045030000410000000001000414000000450210009c0000000001038019000000c00110021000000051011001c70000004e02000041011001060000040f00000000030100190000006003300270000000450030019d0000004503300197000100000001035500000001022001900000006c0000613d0000000301000029000000400010043f0000005201000041000000a40010043f000000c801000039000001040010043f00000000010004140000005302000041000000800020043f000000840000043f0000006002000039000000c40020043f0000002002000039000000e40020043f000000450210009c0000004501008041000000c00110021000000054011001c70000800602000039011001060000040f00000001022001900000008f0000613d000000000201043b000000000102004b000000b90000c13d00000001010003670000000002000031000000940000013d0000000001000416000000000101004b000000cb0000c13d0000000c01000039000000000201041a000000460220019700000047022001c7000000000021041b0000002001000039000001000010044300000120000004430000004801000041000001110001042e0000000001000416000000000101004b000000cb0000c13d0000000c01000039000000000101041a0000004b011001980000000001000019000000010100c039000000800010043f0000004c01000041000001110001042e000000400200043d0000001f0430018f0000000505300272000000790000613d000000000600001900000005076002100000000008720019000000000771034f000000000707043b00000000007804350000000106600039000000000756004b000000710000413d000000000604004b000000880000613d0000000505500210000000000151034f00000000055200190000000304400210000000000605043300000000064601cf000000000646022f000000000101043b0000010004400089000000000141022f00000000014101cf000000000161019f00000000001504350000004501000041000000450420009c000000000201801900000040012002100000006002300210000000000121019f0000011200010430000100000001035500000000020100190000006002200270000000450020019d0000004502200197000000400300043d0000001f0420018f0000000505200272000000a10000613d000000000600001900000005076002100000000008730019000000000771034f000000000707043b00000000007804350000000106600039000000000756004b000000990000413d000000000604004b000000b00000613d0000000505500210000000000151034f00000000055300190000000304400210000000000605043300000000064601cf000000000646022f000000000101043b0000010004400089000000000141022f00000000014101cf000000000161019f00000000001504350000004501000041000000450430009c0000000003018019000000450420009c000000000201801900000060012002100000004002300210000000000112019f0000011200010430000300000002001d0000004d0100004100000000001004390000004e01000041000000040010044300000045010000410000000002000414000000450320009c0000000002018019000000c0012002100000004f011001c700008002020000390110010b0000040f0000000102200190000000cd0000613d000000000101043b000000000101004b000000ce0000c13d00000000010000190000011200010430000000000001042f000000400400043d0000005501000041000000000014043500000045010000410000000002000414000000450320009c0000000002018019000000450340009c000200000004001d00000000010440190001004000100218000000c00120021000000001011001af00000056011001c70000004e02000041011001060000040f00000000030100190000006003300270000000450030019d000000450330019700010000000103550000000102200190000000ee0000613d0000000202000029000000570120009c000000fe0000413d0000005a0100004100000000001004350000004101000039000000040010043f0000005b010000410000011200010430000000400200043d0000001f0430018f0000000505300272000000fb0000613d000000000600001900000005076002100000000008720019000000000771034f000000000707043b00000000007804350000000106600039000000000756004b000000f30000413d000000000604004b000000880000613d0000007b0000013d000000400020043f000000030100002900000058011001970000000000120435000000010100002900000059011001c7000001110001042e000000000001042f00000109002104210000000102000039000000000001042d0000000002000019000000000001042d0000010e002104230000000102000039000000000001042d0000000002000019000000000001042d0000011000000432000001110001042e0000011200010430000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff000000000000000000000000000000000000000000000000000000000000010001000000020000000000000000000000000000004000000100000000000000000000000000000000000000000000000000000000000000000000000000f8ccbf4700000000000000000000000000000000000000000000000000000000c04062260000000000000000000000000000000000000000000000000000000000ff000000000000000000000000000000000000000000200000008000000000000000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b830000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d02000002000000000000000000000000000000240000000000000000000000007fb5297f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000800000000000000000010000f5308c3d96b0337c4ecc7f3cfbe24b6caeec57d32c84eefe62b86412679c4d535bdea7cd8a978f128b93471df48c7dbab89d703809115bdc118c235bfd02000000000000000000000000000000000000a400000080000000000000000076eadd360000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000200000000000000000000000004e487b710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"},"assembly":"\t.text\n\t.file\t\"DeploySimpleToken.s.sol:DeploySimpleToken\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[3]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r3, stack[@ptr_return_data]\n\tadd\t128, r0, r4\n\tst.1\t64, r4\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r1\n\tshr.s\t224, r1, r1\n\tsub.s!\t@CPI0_4[0], r1, r2\n\tjump.eq\t@.BB0_36\n\tsub.s!\t@CPI0_5[0], r1, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\tr4, r0, stack-[3]\n\tadd\t@CPI0_8[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_9[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_10[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_9\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_2\n\tadd\t@CPI0_11[0], r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_12[0], r1, r1\n\tadd\t@CPI0_9[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_12\n\tadd\tstack-[3], r0, r1\n\tst.1\t64, r1\n\tadd\t@CPI0_13[0], r0, r1\n\tst.1\t164, r1\n\tadd\t200, r0, r1\n\tst.1\t260, r1\n\tcontext.gas_left\tr1\n\tadd\t@CPI0_14[0], r0, r2\n\tst.1\t128, r2\n\tst.1\t132, r0\n\tadd\t96, r0, r2\n\tst.1\t196, r2\n\tadd\t32, r0, r2\n\tst.1\t228, r2\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_15[0], r1, r1\n\tadd\t32774, r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_17\n\tld\tr1, r2\n\tsub!\tr2, r0, r1\n\tjump.ne\t@.BB0_21\n\tptr.add\tstack[@ptr_return_data], r0, r1\n\tadd\tstack[@returndatasize], r0, r2\n\tjump\t@.BB0_23\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t12, r0, r1\n\tsload\tr1, r2\n\tand\t@CPI0_1[0], r2, r2\n\tor\t@CPI0_2[0], r2, r2\n\tsstore\tr1, r2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_3[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_36:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t12, r0, r1\n\tsload\tr1, r1\n\tand!\t@CPI0_6[0], r1, r1\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_7[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_12:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_40\n\tadd\tr0, r0, r6\n.BB0_14:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_14\n.BB0_40:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_16\n.BB0_15:\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr2, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_16:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tshl.s\t96, r3, r2\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_17:\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tadd\tr1, r0, r2\n\tshr.s\t96, r2, r2\n\tand\t@CPI0_0[0], r2, stack[@returndatasize]\n\tand\t@CPI0_0[0], r2, r2\n.BB0_23:\n\tld.1\t64, r3\n\tand\t31, r2, r4\n\tshr.s!\t5, r2, r5\n\tjump.eq\t@.BB0_39\n\tadd\tr0, r0, r6\n.BB0_25:\n\tshl.s\t5, r6, r7\n\tadd\tr3, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_25\n.BB0_39:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_27\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr3, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_27:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t96, r2, r1\n\tshl.s\t64, r3, r2\n\tor\tr2, r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_21:\n\tadd\tr2, r0, stack-[3]\n\tadd\t@CPI0_8[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_9[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_10[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_9\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_28\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_9:\n\trevert\n.BB0_28:\n\tld.1\t64, r4\n\tadd\t@CPI0_16[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[2]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, stack-[1]\n\tshl.s\t192, r2, r1\n\tor\tstack-[1], r1, r1\n\tor\t@CPI0_17[0], r1, r1\n\tadd\t@CPI0_9[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_29\n\tadd\tstack-[2], r0, r2\n\tsub.s!\t@CPI0_18[0], r2, r1\n\tjump.lt\t@.BB0_35\n\tadd\t@CPI0_21[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_22[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_29:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_38\n\tadd\tr0, r0, r6\n.BB0_31:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_31\n.BB0_38:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_16\n\tjump\t@.BB0_15\n.BB0_35:\n\tst.1\t64, r2\n\tadd\tstack-[3], r0, r1\n\tand\t@CPI0_19[0], r1, r1\n\tst.1\tr2, r1\n\tadd\tstack-[1], r0, r1\n\tor\t@CPI0_20[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\n__cxa_throw:\n.func_begin1:\n\trevert\n.func_end1:\n\n__farcall:\n.func_begin2:\n.tmp0:\n\tfar_call\tr1, r2, @.BB2_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB2_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end2:\n\n__staticcall:\n.func_begin3:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB3_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB3_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end3:\n\n\t.data\n\t.p2align\t5, 0x0\nreturndatasize:\n\t.cell 0\n\n\t.p2align\t5, 0x0\nptr_return_data:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell -16711936\nCPI0_2:\n\t.cell 65537\nCPI0_3:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_4:\n\t.cell 4174167879\nCPI0_5:\n\t.cell 3225444902\nCPI0_6:\n\t.cell 16711680\nCPI0_7:\n\t.cell 2535301202817642044428229017600\nCPI0_8:\n\t.cell 10867283408178898638301172343726954674910073630256871736220740970449699113859\nCPI0_9:\n\t.cell 645326474426547203313410069153905908525362434349\nCPI0_10:\n\t.cell 904625751086426111047927909714404454142933105326819602152923490636624035840\nCPI0_11:\n\t.cell 57763817484313164028313283939489504447484577087939811246371138302511295758336\nCPI0_12:\n\t.cell 316912652418240591808998408192\nCPI0_13:\n\t.cell 452319458882881468983459914680723159325974575537430270478183811228037812839\nCPI0_14:\n\t.cell -45094662312588414058508742492242807367897819822786606328124609013070528553987\nCPI0_15:\n\t.cell 904625697166532776746648320380374280103671768193735561258796981837851787264\nCPI0_16:\n\t.cell 53787885087763336501906314510680303380505312860176240795757540877198344323072\nCPI0_17:\n\t.cell 316912650057057350374175801344\nCPI0_18:\n\t.cell 18446744073709551616\nCPI0_19:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_20:\n\t.cell 2535301200456458802993406410752\nCPI0_21:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_22:\n\t.cell 2852213850513516153367582212096\n","methodIdentifiers":{"IS_SCRIPT()":"f8ccbf47","run()":"c0406226"},"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.580a8fe5\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IS_SCRIPT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"run\",\"outputs\":[{\"internalType\":\"contract SimpleToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"script/DeploySimpleToken.s.sol\":\"DeploySimpleToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/forge-std/src/Base.sol\":{\"keccak256\":\"0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224\",\"dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK\"]},\"lib/forge-std/src/Script.sol\":{\"keccak256\":\"0x2315be74cc2826f9da401bea3da46a10ad6a6efdf73176d79160b453286d0ed2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://af0d4dc826911d6cb4d6272ed5cbdb6950e1476141cca328e178b808d848789c\",\"dweb:/ipfs/QmV2ytjUEkV84VtdMs1nZqQTBoVE987cHboQMpiha5yo3e\"]},\"lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0x1e2c73d51d6b0d1101f3a4cf0e6def9818a891d6aa8d306f2b127943a69dca2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ab436d74b405f890e2634c6077df15cc196b4032ec1bdabaaf021ef209e68db\",\"dweb:/ipfs/Qmbb1Qgtdn6S4aqrnpg3y9TDX7erFFcRir9GN62Y7QazaY\"]},\"lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0xb72f3519e0bf7d31df5d68557525f4fc55d861c3fb3b0f7793144ef7c94cbeb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f3456d0f78e6f61203fa7871ba2df0d35925f10db3baee14be623ce2a35b84e2\",\"dweb:/ipfs/QmWE6QQSBvJifHMraisBTrf1x4WCwrDoTPLX8UKajTiApc\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x62bed173cb126f6d5006706cf249bac8a2d51bfa18f773f314784ff18adc622d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5acc33dddbf2492e37dc32e89cd56ce917272d303a6874805f3a5768a6bfbf54\",\"dweb:/ipfs/QmTsgFhcpUf16gAVazUXU3WspgX8nHke2hzVCvoqS25WEp\"]},\"lib/forge-std/src/StdMath.sol\":{\"keccak256\":\"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92\",\"dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC\"]},\"lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0xb91ab24383a5872b894fc93325eef1add6cbbf981628f18e860068bf88bb7dcc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2651e33b9ac8fc5803ed0a43078c1bf4fa90a0b0347aafd95776b02daccdcc57\",\"dweb:/ipfs/QmbdRyPuGJdZgnCuMnp7c1WsBo1Spf7j1KMmws1Z5rd4BQ\"]},\"lib/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8\",\"dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK\"]},\"lib/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x4a5853bb9688c4e1c65626036cddd8ea2af84ef1046b704ddc3782d84a892410\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09c1024e6aac9657312fcfcf5c3dee62c22edf9f74a1065e6924c4ec710ecafa\",\"dweb:/ipfs/QmRNURoTUkd6DiZnf8yY8o3stJpVQBifopdSpQgP9RhvRr\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0x18e223717d9fd7c71e60c3fc3209ff49ee774365b6294039e2f6c17b8250c7a6\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://c4a8457a84ddb1e753c8634876065f5d12691fac78675dcc7a405f511827015b\",\"dweb:/ipfs/QmRagGCM8bZXGjCwxt8tmNf79yb1SuCqNfiDr8WvakEPxo\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0xf61cb43a94d8318049d0a7f567af8c0aa952b5762a43851b130b90b3fcde0c6a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://53a52c6c3aeb22f7a18f53fca16af590308a8e3e5507e74df9b8e2561c932194\",\"dweb:/ipfs/QmaaXuY8mC66YoE2xyZdWuLHXqAxLjbnNxiofx8BTP1MRn\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x3b8fe79f48f065a4e4d35362171304a33784c3a90febae5f2787805a438de12f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://61de63af08803549299e68b6e6e88d40f3c5afac450e4ee0a228c66a61ba003d\",\"dweb:/ipfs/QmWVoQ5rrVxnczD4ZZoPbD4PC9Z3uExJtzjD4awTqd14MZ\"]},\"lib/forge-std/src/interfaces/IERC165.sol\":{\"keccak256\":\"0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://698352fb240868ea8f1d1fe389993035eeab930f10d06934f80ccfb2b6ccbfbc\",\"dweb:/ipfs/QmT6WLHAgXxFhh12kWym895oTzXid1326iZiwT3pyfggoT\"]},\"lib/forge-std/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x4cab887298790f908c27de107e4e2907ca5413aee482ef776f8d2f353c5ef947\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb715e0c4a2bdbe432bb624501506041f06e878e0b72675aebba30ad2c2b72e7\",\"dweb:/ipfs/QmWhhLSvkxS2NrukJJHqFY8gDVE5r9rD4PfHvR24pwdKv9\"]},\"lib/forge-std/src/interfaces/IERC721.sol\":{\"keccak256\":\"0xf069262a264fdb69f8f37a10d2df7374649e9ba73f8414c9c8a3b51184625f15\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://924a41ca82a68ffbd503a5faf2f76d13e9938f10501a71094716f12bb64b4b7f\",\"dweb:/ipfs/QmdWnqfKc5ZGhmxNPTde4zrFchnv9Yk9MpCMb2rdhXE5gm\"]},\"lib/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0\",\"dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2\"]},\"lib/forge-std/src/mocks/MockERC20.sol\":{\"keccak256\":\"0xadbdfc6639edec00ba94bb1133a0fd8de31ccafe45c2ef5df9b3ca61b60b559b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc766f01bccf669abac8cc7b2096cc1352a66471ca3772ae61b1801dedc4ed4f\",\"dweb:/ipfs/QmNigaPj1LYkP7Z5xr4ijkUxr2K66fDGeoifG3WoM9ruyw\"]},\"lib/forge-std/src/mocks/MockERC721.sol\":{\"keccak256\":\"0xbfbb755bb379f58b97699f7cda0e9a2b9113daaa072e41b280a5ce6a3bff44c9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5ae0c31d29db14d6a0e9b62d33d550feb307f48a6f45068901a013321f337f87\",\"dweb:/ipfs/QmX25DVXW6XZDvRm6SNBGCWrZQ6oNhdq5CmgtVocvsUdwv\"]},\"lib/forge-std/src/safeconsole.sol\":{\"keccak256\":\"0xbaf41fdc6c54297e7cd8250e48b0f20eaac918e342a1028cef3f9a52ac086381\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a500ad81dea226f9910e6b50f99a9ff930105e393a692cbfb2185e4cdb4424ae\",\"dweb:/ipfs/QmVbUQpXNMmMWRiy4FvBNczzq46BMGfUoBikvSHNiCxVTq\"]},\"script/DeploySimpleToken.s.sol\":{\"keccak256\":\"0x582d892521a03216f76fcfbbbbb0710a438eb7fe101637ebe42a5ac2c94ef071\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://eed314fa288624ef7c94e809caa8e3ef0454d688df413d1011637ccfdd2e1ed8\",\"dweb:/ipfs/QmTsAsACDu7X2AUrUxN1jRmyKvdJ6F8f1z5Fgyn2MssX3N\"]},\"src/SimpleToken.sol\":{\"keccak256\":\"0x7f6237dec74d669e5768f93e6e6d61497b29b64a8829f79f48520033d28c159e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e411cb700166a08a52e0a1c385d72155f493bbb5b3db115f3d72832694f94f31\",\"dweb:/ipfs/QmVGbQkPLAvLkTu5Jwm7nYQb2uXrRFL1aMYeThUuBbCP6v\"]}},\"version\":1}","solc_version":"0.8.19","solc_zkvm_edition":"1.0.1","zk_version":"1.4.1"},"storageLayout":{"storage":[],"types":{}},"userdoc":{},"devdoc":{},"irOptimized":"/// @use-src 0:\"lib/forge-std/src/Base.sol\", 1:\"lib/forge-std/src/Script.sol\", 2:\"lib/forge-std/src/StdChains.sol\", 3:\"lib/forge-std/src/StdCheats.sol\", 8:\"lib/forge-std/src/StdUtils.sol\", 20:\"script/DeploySimpleToken.s.sol\"\nobject \"DeploySimpleToken_35397\" {\n    code {\n        {\n            /// @src 20:154:391  \"contract DeploySimpleToken is Script{...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            sstore(/** @src 2:3166:3170  \"true\" */ 0x0c, /** @src 20:154:391  \"contract DeploySimpleToken is Script{...\" */ or(and(sload(/** @src 2:3166:3170  \"true\" */ 0x0c), /** @src 20:154:391  \"contract DeploySimpleToken is Script{...\" */ not(16711935)), 65537))\n            let _2 := datasize(\"DeploySimpleToken_35397_deployed\")\n            codecopy(_1, dataoffset(\"DeploySimpleToken_35397_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 0:\"lib/forge-std/src/Base.sol\", 1:\"lib/forge-std/src/Script.sol\", 20:\"script/DeploySimpleToken.s.sol\"\n    object \"DeploySimpleToken_35397_deployed\" {\n        code {\n            {\n                /// @src 20:154:391  \"contract DeploySimpleToken is Script{...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let _3 := 0\n                    switch shr(224, calldataload(_3))\n                    case 0xc0406226 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        let _4 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                        /// @src 20:251:270  \"vm.startBroadcast()\"\n                        if iszero(extcodesize(/** @src 20:154:391  \"contract DeploySimpleToken is Script{...\" */ _4))\n                        /// @src 20:251:270  \"vm.startBroadcast()\"\n                        {\n                            /// @src 20:154:391  \"contract DeploySimpleToken is Script{...\"\n                            revert(_3, _3)\n                        }\n                        /// @src 20:251:270  \"vm.startBroadcast()\"\n                        mstore(_1, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(224, 0x7fb5297f))\n                        /// @src 20:251:270  \"vm.startBroadcast()\"\n                        let _5 := call(gas(), /** @src 20:154:391  \"contract DeploySimpleToken is Script{...\" */ _4, _3, /** @src 20:251:270  \"vm.startBroadcast()\" */ _1, /** @src 20:154:391  \"contract DeploySimpleToken is Script{...\" */ 4, /** @src 20:251:270  \"vm.startBroadcast()\" */ _1, /** @src 20:154:391  \"contract DeploySimpleToken is Script{...\" */ _3)\n                        /// @src 20:251:270  \"vm.startBroadcast()\"\n                        if iszero(_5)\n                        {\n                            /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                            let pos := /** @src 20:154:391  \"contract DeploySimpleToken is Script{...\" */ mload(_2)\n                            /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                            returndatacopy(pos, /** @src 20:154:391  \"contract DeploySimpleToken is Script{...\" */ _3, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                            revert(pos, returndatasize())\n                        }\n                        /// @src 20:251:270  \"vm.startBroadcast()\"\n                        if _5\n                        {\n                            finalize_allocation(_1)\n                            /// @src 20:154:391  \"contract DeploySimpleToken is Script{...\"\n                            _3 := _3\n                        }\n                        /// @src 20:306:326  \"new SimpleToken(200)\"\n                        let _6 := /** @src 20:154:391  \"contract DeploySimpleToken is Script{...\" */ mload(_2)\n                        /// @src 20:306:326  \"new SimpleToken(200)\"\n                        let _7 := datasize(\"SimpleToken_35683\")\n                        let _8 := add(_6, _7)\n                        if or(gt(_8, 0xffffffffffffffff), lt(_8, _6))\n                        {\n                            /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                            mstore(/** @src 20:154:391  \"contract DeploySimpleToken is Script{...\" */ _3, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(224, 0x4e487b71))\n                            mstore(/** @src 20:154:391  \"contract DeploySimpleToken is Script{...\" */ 4, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ 0x41)\n                            revert(/** @src 20:154:391  \"contract DeploySimpleToken is Script{...\" */ _3, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ 0x24)\n                        }\n                        /// @src 20:306:326  \"new SimpleToken(200)\"\n                        datacopy(_6, dataoffset(\"SimpleToken_35683\"), _7)\n                        /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                        mstore(_8, /** @src 20:322:325  \"200\" */ 0xc8)\n                        /// @src 20:306:326  \"new SimpleToken(200)\"\n                        let expr_address := create(/** @src 20:154:391  \"contract DeploySimpleToken is Script{...\" */ _3, /** @src 20:306:326  \"new SimpleToken(200)\" */ _6, add(sub(/** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ _8, /** @src 20:306:326  \"new SimpleToken(200)\" */ _6), /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ 32))\n                        /// @src 20:306:326  \"new SimpleToken(200)\"\n                        if iszero(expr_address)\n                        {\n                            /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                            let pos_1 := /** @src 20:154:391  \"contract DeploySimpleToken is Script{...\" */ mload(_2)\n                            /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                            returndatacopy(pos_1, /** @src 20:154:391  \"contract DeploySimpleToken is Script{...\" */ _3, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                            revert(pos_1, returndatasize())\n                        }\n                        /// @src 20:336:354  \"vm.stopBroadcast()\"\n                        if iszero(extcodesize(/** @src 20:154:391  \"contract DeploySimpleToken is Script{...\" */ _4))\n                        /// @src 20:336:354  \"vm.stopBroadcast()\"\n                        {\n                            /// @src 20:154:391  \"contract DeploySimpleToken is Script{...\"\n                            revert(_3, _3)\n                        }\n                        /// @src 20:336:354  \"vm.stopBroadcast()\"\n                        let _9 := /** @src 20:154:391  \"contract DeploySimpleToken is Script{...\" */ mload(_2)\n                        /// @src 20:336:354  \"vm.stopBroadcast()\"\n                        mstore(_9, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(225, 0x3b756e9b))\n                        /// @src 20:336:354  \"vm.stopBroadcast()\"\n                        let _10 := call(gas(), /** @src 20:154:391  \"contract DeploySimpleToken is Script{...\" */ _4, _3, /** @src 20:336:354  \"vm.stopBroadcast()\" */ _9, /** @src 20:154:391  \"contract DeploySimpleToken is Script{...\" */ 4, /** @src 20:336:354  \"vm.stopBroadcast()\" */ _9, /** @src 20:154:391  \"contract DeploySimpleToken is Script{...\" */ _3)\n                        /// @src 20:336:354  \"vm.stopBroadcast()\"\n                        if iszero(_10)\n                        {\n                            /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                            let pos_2 := /** @src 20:154:391  \"contract DeploySimpleToken is Script{...\" */ mload(_2)\n                            /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                            returndatacopy(pos_2, /** @src 20:154:391  \"contract DeploySimpleToken is Script{...\" */ _3, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                            revert(pos_2, returndatasize())\n                        }\n                        /// @src 20:336:354  \"vm.stopBroadcast()\"\n                        if _10\n                        {\n                            finalize_allocation(_9)\n                            /// @src 20:154:391  \"contract DeploySimpleToken is Script{...\"\n                            if _3 { revert(_3, _3) }\n                        }\n                        let memPos := mload(_2)\n                        mstore(memPos, and(expr_address, sub(shl(160, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ 1), 1)))\n                        /// @src 20:154:391  \"contract DeploySimpleToken is Script{...\"\n                        return(memPos, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ 32)\n                    }\n                    case /** @src 20:154:391  \"contract DeploySimpleToken is Script{...\" */ 0xf8ccbf47 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        let value := and(shr(16, sload(/** @src 1:800:828  \"bool public IS_SCRIPT = true\" */ 12)), /** @src 20:154:391  \"contract DeploySimpleToken is Script{...\" */ 0xff)\n                        let memPos_1 := mload(_2)\n                        mstore(memPos_1, iszero(iszero(value)))\n                        return(memPos_1, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n            /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n            function finalize_allocation(memPtr)\n            {\n                if gt(memPtr, 0xffffffffffffffff)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, memPtr)\n            }\n        }\n        /// @use-src 22:\"src/SimpleToken.sol\"\n        object \"SimpleToken_35683\" {\n            code {\n                {\n                    /// @src 22:57:1843  \"contract SimpleToken {...\"\n                    let _1 := memoryguard(0x80)\n                    if callvalue() { revert(0, 0) }\n                    let programSize := datasize(\"SimpleToken_35683\")\n                    let argSize := sub(codesize(), programSize)\n                    let newFreePtr := add(_1, and(add(argSize, 31), not(31)))\n                    if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, _1))\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 22:57:1843  \"contract SimpleToken {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 22:57:1843  \"contract SimpleToken {...\" */ 0x24)\n                    }\n                    mstore(64, newFreePtr)\n                    codecopy(_1, programSize, argSize)\n                    if slt(sub(add(_1, argSize), _1), 32)\n                    {\n                        revert(/** @src -1:-1:-1 */ 0, 0)\n                    }\n                    /// @src 22:57:1843  \"contract SimpleToken {...\"\n                    let value := mload(_1)\n                    /// @src -1:-1:-1\n                    let _2 := 0\n                    /// @src 22:57:1843  \"contract SimpleToken {...\"\n                    let _3 := extract_byte_array_length(sload(/** @src -1:-1:-1 */ _2))\n                    /// @src 22:57:1843  \"contract SimpleToken {...\"\n                    if gt(_3, 31)\n                    {\n                        mstore(/** @src -1:-1:-1 */ _2, _2)\n                        /// @src 22:57:1843  \"contract SimpleToken {...\"\n                        let data := keccak256(/** @src -1:-1:-1 */ _2, /** @src 22:57:1843  \"contract SimpleToken {...\" */ 32)\n                        let _4 := add(data, shr(5, add(_3, 31)))\n                        let start := data\n                        for { } lt(start, _4) { start := add(start, 1) }\n                        {\n                            sstore(start, /** @src -1:-1:-1 */ _2)\n                        }\n                    }\n                    /// @src 22:57:1843  \"contract SimpleToken {...\"\n                    sstore(/** @src -1:-1:-1 */ _2, /** @src 22:57:1843  \"contract SimpleToken {...\" */ add(\"SimpleToken\", 22))\n                    let _5 := 1\n                    let _6 := extract_byte_array_length(sload(_5))\n                    if gt(_6, 31)\n                    {\n                        mstore(/** @src -1:-1:-1 */ _2, /** @src 22:57:1843  \"contract SimpleToken {...\" */ _5)\n                        let data_1 := keccak256(/** @src -1:-1:-1 */ _2, /** @src 22:57:1843  \"contract SimpleToken {...\" */ 32)\n                        let _7 := add(data_1, shr(5, add(_6, 31)))\n                        let start_1 := data_1\n                        for { } lt(start_1, _7) { start_1 := add(start_1, _5) }\n                        {\n                            sstore(start_1, /** @src -1:-1:-1 */ _2)\n                        }\n                    }\n                    /// @src 22:57:1843  \"contract SimpleToken {...\"\n                    sstore(_5, add(\"STK\", 6))\n                    sstore(/** @src 22:182:184  \"18\" */ 0x02, /** @src 22:57:1843  \"contract SimpleToken {...\" */ or(and(sload(/** @src 22:182:184  \"18\" */ 0x02), /** @src 22:57:1843  \"contract SimpleToken {...\" */ not(255)), /** @src 22:182:184  \"18\" */ 0x12))\n                    /// @src 22:57:1843  \"contract SimpleToken {...\"\n                    let _8 := 0x0de0b6b3a7640000\n                    let product := mul(value, _8)\n                    if iszero(or(iszero(value), eq(_8, div(product, value))))\n                    {\n                        mstore(/** @src -1:-1:-1 */ _2, /** @src 22:57:1843  \"contract SimpleToken {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x11)\n                        revert(/** @src -1:-1:-1 */ _2, /** @src 22:57:1843  \"contract SimpleToken {...\" */ 0x24)\n                    }\n                    sstore(3, product)\n                    mstore(/** @src -1:-1:-1 */ _2, /** @src 22:629:639  \"msg.sender\" */ caller())\n                    /// @src 22:57:1843  \"contract SimpleToken {...\"\n                    mstore(32, /** @src 22:619:628  \"balanceOf\" */ 0x04)\n                    /// @src 22:57:1843  \"contract SimpleToken {...\"\n                    sstore(keccak256(/** @src -1:-1:-1 */ _2, /** @src 22:57:1843  \"contract SimpleToken {...\" */ 64), product)\n                    /// @src 22:669:714  \"Transfer(address(0), msg.sender, totalSupply)\"\n                    let _9 := /** @src 22:57:1843  \"contract SimpleToken {...\" */ mload(64)\n                    mstore(_9, product)\n                    /// @src 22:669:714  \"Transfer(address(0), msg.sender, totalSupply)\"\n                    log3(_9, /** @src 22:57:1843  \"contract SimpleToken {...\" */ 32, /** @src 22:669:714  \"Transfer(address(0), msg.sender, totalSupply)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, /** @src -1:-1:-1 */ _2, /** @src 22:629:639  \"msg.sender\" */ caller())\n                    /// @src 22:57:1843  \"contract SimpleToken {...\"\n                    let _10 := mload(64)\n                    let _11 := datasize(\"SimpleToken_35683_deployed\")\n                    codecopy(_10, dataoffset(\"SimpleToken_35683_deployed\"), _11)\n                    return(_10, _11)\n                }\n                function extract_byte_array_length(data) -> length\n                {\n                    length := shr(1, data)\n                    let outOfPlaceEncoding := and(data, 1)\n                    if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                    if eq(outOfPlaceEncoding, lt(length, 32))\n                    {\n                        mstore(0, shl(224, 0x4e487b71))\n                        mstore(4, 0x22)\n                        revert(0, 0x24)\n                    }\n                }\n            }\n            /// @use-src 22:\"src/SimpleToken.sol\"\n            object \"SimpleToken_35683_deployed\" {\n                code {\n                    {\n                        /// @src 22:57:1843  \"contract SimpleToken {...\"\n                        let _1 := memoryguard(0x80)\n                        let _2 := 64\n                        mstore(_2, _1)\n                        let _3 := 4\n                        if iszero(lt(calldatasize(), _3))\n                        {\n                            let _4 := 0\n                            switch shr(224, calldataload(_4))\n                            case 0x06fdde03 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let ret := _4\n                                let slotValue := sload(_4)\n                                let length := _4\n                                let _5 := 1\n                                length := shr(_5, slotValue)\n                                let outOfPlaceEncoding := and(slotValue, _5)\n                                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                                let _6 := 32\n                                if eq(outOfPlaceEncoding, lt(length, _6))\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x22)\n                                    revert(_4, 0x24)\n                                }\n                                mstore(_1, length)\n                                switch outOfPlaceEncoding\n                                case 0 {\n                                    mstore(add(_1, _6), and(slotValue, not(255)))\n                                    ret := add(add(_1, shl(5, iszero(iszero(length)))), _6)\n                                }\n                                case 1 {\n                                    mstore(_4, _4)\n                                    let dataPos := 18569430475105882587588266137607568536673111973893317399460219858819262702947\n                                    let i := _4\n                                    for { } lt(i, length) { i := add(i, _6) }\n                                    {\n                                        mstore(add(add(_1, i), _6), sload(dataPos))\n                                        dataPos := add(dataPos, _5)\n                                    }\n                                    ret := add(add(_1, i), _6)\n                                }\n                                let newFreePtr := add(_1, and(add(sub(ret, _1), 31), not(31)))\n                                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, _1))\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x41)\n                                    revert(_4, 0x24)\n                                }\n                                mstore(_2, newFreePtr)\n                                return(newFreePtr, sub(abi_encode_string(newFreePtr, _1), newFreePtr))\n                            }\n                            case 0x095ea7b3 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                                let value0 := abi_decode_address()\n                                let value := calldataload(36)\n                                mstore(_4, /** @src 22:1209:1219  \"msg.sender\" */ caller())\n                                /// @src 22:57:1843  \"contract SimpleToken {...\"\n                                mstore(32, /** @src 22:1199:1208  \"allowance\" */ 0x05)\n                                /// @src 22:57:1843  \"contract SimpleToken {...\"\n                                let _7 := keccak256(_4, _2)\n                                let _8 := and(value0, sub(shl(160, 1), 1))\n                                mstore(_4, _8)\n                                mstore(32, _7)\n                                sstore(keccak256(_4, _2), value)\n                                /// @src 22:1263:1301  \"Approval(msg.sender, _spender, _value)\"\n                                let _9 := /** @src 22:57:1843  \"contract SimpleToken {...\" */ mload(_2)\n                                mstore(_9, value)\n                                /// @src 22:1263:1301  \"Approval(msg.sender, _spender, _value)\"\n                                log3(_9, /** @src 22:57:1843  \"contract SimpleToken {...\" */ 32, /** @src 22:1263:1301  \"Approval(msg.sender, _spender, _value)\" */ 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, /** @src 22:1209:1219  \"msg.sender\" */ caller(), /** @src 22:1263:1301  \"Approval(msg.sender, _spender, _value)\" */ _8)\n                                /// @src 22:57:1843  \"contract SimpleToken {...\"\n                                let memPos := mload(_2)\n                                mstore(memPos, 1)\n                                return(memPos, 32)\n                            }\n                            case 0x18160ddd {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let _10 := sload(/** @src 22:190:216  \"uint256 public totalSupply\" */ 3)\n                                /// @src 22:57:1843  \"contract SimpleToken {...\"\n                                let memPos_1 := mload(_2)\n                                mstore(memPos_1, _10)\n                                return(memPos_1, 32)\n                            }\n                            case 0x23b872dd {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 96) { revert(_4, _4) }\n                                let value0_1 := abi_decode_address()\n                                let value1 := abi_decode_address_3798()\n                                let value_1 := calldataload(68)\n                                let _11 := sub(shl(160, 1), 1)\n                                let _12 := and(/** @src 22:1449:1466  \"_to != address(0)\" */ value1, /** @src 22:57:1843  \"contract SimpleToken {...\" */ _11)\n                                /// @src 22:1441:1486  \"require(_to != address(0), \\\"Invalid address\\\")\"\n                                require_helper_stringliteral(/** @src 22:1449:1466  \"_to != address(0)\" */ iszero(iszero(/** @src 22:57:1843  \"contract SimpleToken {...\" */ _12)))\n                                let _13 := and(value0_1, _11)\n                                mstore(_4, _13)\n                                let _14 := 32\n                                mstore(_14, _3)\n                                /// @src 22:1496:1555  \"require(balanceOf[_from] >= _value, \\\"Insufficient balance\\\")\"\n                                require_helper_stringliteral_4753(/** @src 22:1504:1530  \"balanceOf[_from] >= _value\" */ iszero(lt(/** @src 22:57:1843  \"contract SimpleToken {...\" */ sload(keccak256(_4, _2)), /** @src 22:1504:1530  \"balanceOf[_from] >= _value\" */ value_1)))\n                                /// @src 22:57:1843  \"contract SimpleToken {...\"\n                                mstore(_4, _13)\n                                mstore(_14, /** @src 22:1573:1582  \"allowance\" */ 0x05)\n                                /// @src 22:57:1843  \"contract SimpleToken {...\"\n                                let dataSlot := keccak256(_4, _2)\n                                mstore(_4, /** @src 22:1590:1600  \"msg.sender\" */ caller())\n                                /// @src 22:57:1843  \"contract SimpleToken {...\"\n                                mstore(_14, dataSlot)\n                                if /** @src 22:1573:1611  \"allowance[_from][msg.sender] >= _value\" */ lt(/** @src 22:57:1843  \"contract SimpleToken {...\" */ sload(keccak256(_4, _2)), /** @src 22:1573:1611  \"allowance[_from][msg.sender] >= _value\" */ value_1)\n                                /// @src 22:57:1843  \"contract SimpleToken {...\"\n                                {\n                                    let memPtr := mload(_2)\n                                    mstore(memPtr, shl(229, 4594637))\n                                    mstore(add(memPtr, _3), _14)\n                                    mstore(add(memPtr, 36), 18)\n                                    mstore(add(memPtr, 68), \"Allowance exceeded\")\n                                    revert(memPtr, 100)\n                                }\n                                mstore(_4, _13)\n                                mstore(_14, _3)\n                                let dataSlot_1 := keccak256(_4, _2)\n                                sstore(dataSlot_1, /** @src 22:1653:1679  \"balanceOf[_from] -= _value\" */ checked_sub_uint256(/** @src 22:57:1843  \"contract SimpleToken {...\" */ sload(/** @src 22:1653:1679  \"balanceOf[_from] -= _value\" */ dataSlot_1), value_1))\n                                /// @src 22:57:1843  \"contract SimpleToken {...\"\n                                mstore(_4, _12)\n                                mstore(_14, _3)\n                                let dataSlot_2 := keccak256(_4, _2)\n                                sstore(dataSlot_2, /** @src 22:1689:1713  \"balanceOf[_to] += _value\" */ checked_add_uint256(/** @src 22:57:1843  \"contract SimpleToken {...\" */ sload(/** @src 22:1689:1713  \"balanceOf[_to] += _value\" */ dataSlot_2), value_1))\n                                /// @src 22:57:1843  \"contract SimpleToken {...\"\n                                mstore(_4, _13)\n                                mstore(_14, /** @src 22:1573:1582  \"allowance\" */ 0x05)\n                                /// @src 22:57:1843  \"contract SimpleToken {...\"\n                                let _15 := keccak256(_4, _2)\n                                mstore(_4, /** @src 22:1590:1600  \"msg.sender\" */ caller())\n                                /// @src 22:57:1843  \"contract SimpleToken {...\"\n                                mstore(_14, _15)\n                                let dataSlot_3 := keccak256(_4, _2)\n                                sstore(dataSlot_3, /** @src 22:1723:1761  \"allowance[_from][msg.sender] -= _value\" */ checked_sub_uint256(/** @src 22:57:1843  \"contract SimpleToken {...\" */ sload(/** @src 22:1723:1761  \"allowance[_from][msg.sender] -= _value\" */ dataSlot_3), value_1))\n                                /// @src 22:1785:1813  \"Transfer(_from, _to, _value)\"\n                                let _16 := /** @src 22:57:1843  \"contract SimpleToken {...\" */ mload(_2)\n                                mstore(_16, value_1)\n                                /// @src 22:1785:1813  \"Transfer(_from, _to, _value)\"\n                                log3(_16, /** @src 22:57:1843  \"contract SimpleToken {...\" */ _14, /** @src 22:1785:1813  \"Transfer(_from, _to, _value)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, _13, _12)\n                                /// @src 22:57:1843  \"contract SimpleToken {...\"\n                                let memPos_2 := mload(_2)\n                                mstore(memPos_2, 1)\n                                return(memPos_2, _14)\n                            }\n                            case 0x313ce567 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let value_2 := and(sload(/** @src 22:158:184  \"uint8 public decimals = 18\" */ 2), /** @src 22:57:1843  \"contract SimpleToken {...\" */ 0xff)\n                                let memPos_3 := mload(_2)\n                                mstore(memPos_3, value_2)\n                                return(memPos_3, 32)\n                            }\n                            case 0x70a08231 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                mstore(_4, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                                mstore(32, _3)\n                                let _17 := sload(keccak256(_4, _2))\n                                let memPos_4 := mload(_2)\n                                mstore(memPos_4, _17)\n                                return(memPos_4, 32)\n                            }\n                            case 0x95d89b41 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let memPtr_1 := mload(_2)\n                                let ret_1 := _4\n                                /// @src 22:124:152  \"string public symbol = \\\"STK\\\"\"\n                                let _18 := 1\n                                /// @src 22:57:1843  \"contract SimpleToken {...\"\n                                let slotValue_1 := sload(/** @src 22:124:152  \"string public symbol = \\\"STK\\\"\" */ _18)\n                                /// @src 22:57:1843  \"contract SimpleToken {...\"\n                                let length_1 := _4\n                                length_1 := shr(/** @src 22:124:152  \"string public symbol = \\\"STK\\\"\" */ _18, /** @src 22:57:1843  \"contract SimpleToken {...\" */ slotValue_1)\n                                let outOfPlaceEncoding_1 := and(slotValue_1, /** @src 22:124:152  \"string public symbol = \\\"STK\\\"\" */ _18)\n                                /// @src 22:57:1843  \"contract SimpleToken {...\"\n                                if iszero(outOfPlaceEncoding_1)\n                                {\n                                    length_1 := and(length_1, 0x7f)\n                                }\n                                let _19 := 32\n                                if eq(outOfPlaceEncoding_1, lt(length_1, _19))\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x22)\n                                    revert(_4, 0x24)\n                                }\n                                mstore(memPtr_1, length_1)\n                                switch outOfPlaceEncoding_1\n                                case 0 {\n                                    mstore(add(memPtr_1, _19), and(slotValue_1, not(255)))\n                                    ret_1 := add(add(memPtr_1, shl(5, iszero(iszero(length_1)))), _19)\n                                }\n                                case 1 {\n                                    mstore(_4, /** @src 22:124:152  \"string public symbol = \\\"STK\\\"\" */ _18)\n                                    /// @src 22:57:1843  \"contract SimpleToken {...\"\n                                    let dataPos_1 := 80084422859880547211683076133703299733277748156566366325829078699459944778998\n                                    let i_1 := _4\n                                    for { } lt(i_1, length_1) { i_1 := add(i_1, _19) }\n                                    {\n                                        mstore(add(add(memPtr_1, i_1), _19), sload(dataPos_1))\n                                        dataPos_1 := add(dataPos_1, /** @src 22:124:152  \"string public symbol = \\\"STK\\\"\" */ _18)\n                                    }\n                                    /// @src 22:57:1843  \"contract SimpleToken {...\"\n                                    ret_1 := add(add(memPtr_1, i_1), _19)\n                                }\n                                let newFreePtr_1 := add(memPtr_1, and(add(sub(ret_1, memPtr_1), 31), not(31)))\n                                if or(gt(newFreePtr_1, 0xffffffffffffffff), lt(newFreePtr_1, memPtr_1))\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x41)\n                                    revert(_4, 0x24)\n                                }\n                                mstore(_2, newFreePtr_1)\n                                return(newFreePtr_1, sub(abi_encode_string(newFreePtr_1, memPtr_1), newFreePtr_1))\n                            }\n                            case 0xa9059cbb {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                                let value0_2 := abi_decode_address()\n                                let value_3 := calldataload(36)\n                                let _20 := and(/** @src 22:822:839  \"_to != address(0)\" */ value0_2, /** @src 22:57:1843  \"contract SimpleToken {...\" */ sub(shl(160, 1), 1))\n                                /// @src 22:814:859  \"require(_to != address(0), \\\"Invalid address\\\")\"\n                                require_helper_stringliteral(/** @src 22:822:839  \"_to != address(0)\" */ iszero(iszero(/** @src 22:57:1843  \"contract SimpleToken {...\" */ _20)))\n                                mstore(_4, /** @src 22:887:897  \"msg.sender\" */ caller())\n                                /// @src 22:57:1843  \"contract SimpleToken {...\"\n                                mstore(32, _3)\n                                /// @src 22:869:933  \"require(balanceOf[msg.sender] >= _value, \\\"Insufficient balance\\\")\"\n                                require_helper_stringliteral_4753(/** @src 22:877:908  \"balanceOf[msg.sender] >= _value\" */ iszero(lt(/** @src 22:57:1843  \"contract SimpleToken {...\" */ sload(keccak256(_4, _2)), /** @src 22:877:908  \"balanceOf[msg.sender] >= _value\" */ value_3)))\n                                /// @src 22:57:1843  \"contract SimpleToken {...\"\n                                mstore(_4, /** @src 22:887:897  \"msg.sender\" */ caller())\n                                /// @src 22:57:1843  \"contract SimpleToken {...\"\n                                mstore(32, _3)\n                                let dataSlot_4 := keccak256(_4, _2)\n                                sstore(dataSlot_4, /** @src 22:952:983  \"balanceOf[msg.sender] -= _value\" */ checked_sub_uint256(/** @src 22:57:1843  \"contract SimpleToken {...\" */ sload(/** @src 22:952:983  \"balanceOf[msg.sender] -= _value\" */ dataSlot_4), value_3))\n                                /// @src 22:57:1843  \"contract SimpleToken {...\"\n                                mstore(_4, _20)\n                                mstore(32, _3)\n                                let dataSlot_5 := keccak256(_4, _2)\n                                sstore(dataSlot_5, /** @src 22:993:1017  \"balanceOf[_to] += _value\" */ checked_add_uint256(/** @src 22:57:1843  \"contract SimpleToken {...\" */ sload(/** @src 22:993:1017  \"balanceOf[_to] += _value\" */ dataSlot_5), value_3))\n                                /// @src 22:1041:1074  \"Transfer(msg.sender, _to, _value)\"\n                                let _21 := /** @src 22:57:1843  \"contract SimpleToken {...\" */ mload(_2)\n                                mstore(_21, value_3)\n                                /// @src 22:1041:1074  \"Transfer(msg.sender, _to, _value)\"\n                                log3(_21, /** @src 22:57:1843  \"contract SimpleToken {...\" */ 32, /** @src 22:1041:1074  \"Transfer(msg.sender, _to, _value)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, /** @src 22:887:897  \"msg.sender\" */ caller(), /** @src 22:1041:1074  \"Transfer(msg.sender, _to, _value)\" */ _20)\n                                /// @src 22:57:1843  \"contract SimpleToken {...\"\n                                let memPos_5 := mload(_2)\n                                mstore(memPos_5, 1)\n                                return(memPos_5, 32)\n                            }\n                            case 0xdd62ed3e {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                                let value0_3 := abi_decode_address()\n                                let value1_1 := abi_decode_address_3798()\n                                let _22 := sub(shl(160, 1), 1)\n                                mstore(_4, and(value0_3, _22))\n                                mstore(32, /** @src 22:277:341  \"mapping(address => mapping(address => uint256)) public allowance\" */ 5)\n                                /// @src 22:57:1843  \"contract SimpleToken {...\"\n                                let _23 := keccak256(_4, _2)\n                                mstore(_4, and(value1_1, _22))\n                                mstore(32, _23)\n                                let _24 := sload(keccak256(_4, _2))\n                                let memPos_6 := mload(_2)\n                                mstore(memPos_6, _24)\n                                return(memPos_6, 32)\n                            }\n                        }\n                        revert(0, 0)\n                    }\n                    function abi_encode_string(headStart, value0) -> tail\n                    {\n                        let _1 := 32\n                        mstore(headStart, _1)\n                        let length := mload(value0)\n                        mstore(add(headStart, _1), length)\n                        let i := 0\n                        for { } lt(i, length) { i := add(i, _1) }\n                        {\n                            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n                        }\n                        mstore(add(add(headStart, length), 64), 0)\n                        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n                    }\n                    function abi_decode_address() -> value\n                    {\n                        value := calldataload(4)\n                        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                    }\n                    function abi_decode_address_3798() -> value\n                    {\n                        value := calldataload(36)\n                        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                    }\n                    function require_helper_stringliteral(condition)\n                    {\n                        if iszero(condition)\n                        {\n                            let memPtr := mload(64)\n                            mstore(memPtr, shl(229, 4594637))\n                            mstore(add(memPtr, 4), 32)\n                            mstore(add(memPtr, 36), 15)\n                            mstore(add(memPtr, 68), \"Invalid address\")\n                            revert(memPtr, 100)\n                        }\n                    }\n                    function require_helper_stringliteral_4753(condition)\n                    {\n                        if iszero(condition)\n                        {\n                            let memPtr := mload(64)\n                            mstore(memPtr, shl(229, 4594637))\n                            mstore(add(memPtr, 4), 32)\n                            mstore(add(memPtr, 36), 20)\n                            mstore(add(memPtr, 68), \"Insufficient balance\")\n                            revert(memPtr, 100)\n                        }\n                    }\n                    function checked_sub_uint256(x, y) -> diff\n                    {\n                        diff := sub(x, y)\n                        if gt(diff, x)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x11)\n                            revert(0, 0x24)\n                        }\n                    }\n                    function checked_add_uint256(x, y) -> sum\n                    {\n                        sum := add(x, y)\n                        if gt(x, sum)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x11)\n                            revert(0, 0x24)\n                        }\n                    }\n                }\n                data \".metadata\" hex\"a164736f6c6343000813000a\"\n            }\n        }\n        data \".metadata\" hex\"a164736f6c6343000813000a\"\n    }\n}\n","hash":"0100005d8035fea6208937ecacf26af2f3b04718f6051c7813837d2ae60ef0c2","factoryDependencies":{"010000f5308c3d96b0337c4ecc7f3cfbe24b6caeec57d32c84eefe62b8641267":"src/SimpleToken.sol:SimpleToken"},"id":20}